Data=read.table("Example.txt", header = TRUE) #讀取Example.txt，並存成"Data"這個物件(資料表格式)
head(Data, 10) #看"Data"這個資料表的前10個row
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Summarize your data"),
sidebarPanel(
fileInput(inputId="files", label=h4("Upload your data file:"), multiple=FALSE, accept="text/plain"),
helpText("Note: you only can upload the .txt file."),
sliderInput("n", h4("Select the observed rows:"), min=5, max=20, value=10)
),
mainPanel(
verbatimTextOutput("summary"),
tableOutput("view")
)
))
library(shiny)
shinyServer(function(input, output) {
output$summary = renderPrint({
if (is.null(input$files)==TRUE) {return("You have to up load your data!!!")} else {
dat = read.table(input$files$datapath, header = TRUE)
summary(dat)
}
})
output$view = renderTable({
if (is.null(input$files)==TRUE) {return()} else {
dat = read.table(input$files$datapath, header = TRUE)
head(dat, input$n)
}
})
})
runApp()
Data=read.table("Example.txt", header = TRUE) #讀取Example.txt，並存成"Data"這個物件(資料表格式)
head(Data, 10) #看"Data"這個資料表的前10個row
summary(Data) #看"Data"這個資料表的所有變項的基本資訊
Color = "red"
plot(Data, col = Color)
runApp()
runApp('Basic widgets')
Data = read.table("Example.txt", header = TRUE) #讀取Example.txt，並存成"Data"這個物件(資料表格式)
Color = "red"          #指定顏色
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Ploting your data"),
sidebarPanel(
fileInput(inputId="files", label=h4("Upload your data file:"), multiple=FALSE, accept="text/plain"),
helpText("Note: you only can upload the .txt file."),
radioButtons("Color", "Select the color of histogram:", choices = c("Red" = "red", "Blue" = "blue", "Green" = "green"))
),
mainPanel(
plotOutput("scatterPlot"),
downloadButton("download", label = "Download plot", class = NULL)
)
))
library(shiny)
shinyServer(function(input, output) {
DATA = reactive({
if (is.null(input$files)) {return()} else {
dat = read.table(input$files$datapath,header=T)
return(dat)
}
})
output$scatterPlot = renderPlot({
dat = DATA()
if (is.null(dat)) {return()} else {
plot(dat,col=input$Color)
}
})
output$download = downloadHandler(
filename = function() {'plot.pdf'},
content = function(con) {
dat = DATA()
if (is.null(dat)) {return()} else {
pdf(con)
plot(dat,col=input$Color)
dev.off()
}
}
)
})
runApp()
library(shiny)
shinyUI(navbarPage("Basic widgets example",
tabPanel("Simple widgets",
fluidRow(
column(4,
h3("Submit Button"),
actionButton("action1", label = "Action"),
br(),
br(),
verbatimTextOutput("action2")
),
column(4,
h3("Single checkbox"),
checkboxInput("checkbox1", label = "Choice A"),
br(),
br(),
verbatimTextOutput("checkbox2")
),
column(4,
h3("Date input"),
dateInput("date1", label = "", value = "2016-01-01"),
br(),
br(),
verbatimTextOutput("date2")
)
),
hr(),
fluidRow(
column(4,
h3("File input"),
fileInput("file1", label = ""),
br(),
br(),
verbatimTextOutput("file2")
),
column(4,
h3("Checkbox group"),
checkboxGroupInput("checkGroup1", label = "",
choices = list("Choice 1" = 1, "Choice 2" = 2, "Choice 3" = 3),
selected = c(1, 2)),
br(),
br(),
verbatimTextOutput("checkGroup2")
),
column(4,
h3("Date range"),
dateRangeInput("dates1", label = "", start = "2016-01-01", end = "2016-03-31"),
br(),
br(),
verbatimTextOutput("dates2")
)
),
hr(),
fluidRow(
column(3,
h3("Data download"),
downloadButton("download2", label = "Download Data", class = NULL)
),
column(3,
h3("Radio buttons"),
radioButtons("radio1", label = "",
choices = list("Choice 1" = 1, "Choice 2" = 2, "Choice 3" = 3),
selected = 1),
br(),
br(),
verbatimTextOutput("radio2")
),
column(3,
h3("Text input"),
textInput("text1", label = "", value = "Enter text..."),
br(),
br(),
verbatimTextOutput("text2")
),
column(3,
h3("Numeric input"),
numericInput("num1", label = "", value = 1),
br(),
br(),
verbatimTextOutput("num2")
)
)
),
tabPanel("Complex widgets",
h2("Sliders"),
fluidRow(
column(4,
h3("Single slider"),
sliderInput("singleslider1", label = "", min = 0, max = 100, value = 50),
br(),
br(),
verbatimTextOutput("singleslider2")
),
column(4,
h3("Ranged slider"),
sliderInput("rangedslider1", label = "",  min = 0, max = 100, value = c(25, 75)),
br(),
verbatimTextOutput("rangedslider2")
),
column(4,
h3("Looping slider"),
sliderInput("loopingslider1", label = "",  min = 0, max = 100, value = 10,
animate = animationOptions(interval=200, loop=TRUE)),
br(),
br(),
verbatimTextOutput("loopingslider2")
)
),
h2("Select boxs"),
fluidRow(
column(3,
h3("Single select box (1)"),
selectInput("singleselect1_1", label = "",
choices = list("Choice 1" = 1, "Choice 2" = 2, "Choice 3" = 3),
selected = 1),
br(),
br(),
verbatimTextOutput("singleselect1_2")
),
column(3,
h3("Single select box (2)"),
selectInput("singleselect2_1", label = "",
choices = list("Choice..." = "", "Choice 1" = 1, "Choice 2" = 2, "Choice 3" = 3),
selected = "", selectize=TRUE),
br(),
br(),
verbatimTextOutput("singleselect2_2")
),
column(3,
h3("Multiple select box (1)"),
selectInput("multipleselect1_1", label = "",
choices = list("Choice 1" = 1, "Choice 2" = 2, "Choice 3" = 3),
selected = NULL, multiple=TRUE, selectize=FALSE),
br(),
br(),
verbatimTextOutput("multipleselect1_2")
),
column(3,
h3("Multiple select box (2)"),
selectInput("multipleselect2_1", label = "",
choices = list("Choice 1" = 1, "Choice 2" = 2, "Choice 3" = 3),
selected = NULL, multiple=TRUE, selectize=TRUE),
br(),
br(),
verbatimTextOutput("multipleselect2_2")
)
)
)
))
library(shiny)
shinyServer(function(input, output) {
output$action2 = renderPrint({
print(input$action1)
})
output$checkbox2 = renderPrint({
print(input$checkbox1)
})
output$date2 = renderPrint({
print(input$date1)
})
output$file2 = renderPrint({
print(input$file1$datapath)
})
output$checkGroup2 = renderPrint({
print(input$checkGroup1)
})
output$dates2 = renderPrint({
print(input$dates1)
})
output$download2 <- downloadHandler(
filename = function() {'data.csv'},
content = function(con) {
data("cars")
write.csv(dat, con)
}
)
output$radio2 = renderPrint({
print(input$radio1)
})
output$text2 = renderPrint({
print(input$text1)
})
output$num2 = renderPrint({
print(input$num1)
})
output$singleslider2 = renderPrint({
print(input$singleslider1)
})
output$rangedslider2 = renderPrint({
print(input$rangedslider1)
})
output$loopingslider2 = renderPrint({
print(input$loopingslider1)
})
output$singleselect1_2 = renderPrint({
print(input$singleselect1_1)
})
output$singleselect2_2 = renderPrint({
print(input$singleselect2_1)
})
output$multipleselect1_2 = renderPrint({
print(input$multipleselect1_1)
})
output$multipleselect2_2 = renderPrint({
print(input$multipleselect2_1)
})
})
runApp('Basic widgets')
runApp()
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Ploting your data"),
sidebarPanel(
fileInput(inputId="files", label=h4("Upload your data file:"), multiple=FALSE, accept="text/plain"),
helpText("Note: you only can upload the .txt file."),
actionButton("action1", label = "Action"),
verbatimTextOutput("action2"),
radioButtons("Color", "Select the color of histogram:", choices = c("Red" = "red", "Blue" = "blue", "Green" = "green"))
),
mainPanel(
plotOutput("scatterPlot"),
downloadButton("download", label = "Download plot", class = NULL)
)
))
library(shiny)
shinyServer(function(input, output) {
output$action2 = renderPrint({
print(input$action1)
})
DATA = reactive({
if (is.null(input$files)) {return()} else {
if(input$action1 ==0){return()}else{
dat = read.table(input$files$datapath,header=T)
return(dat)
}
}
output$scatterPlot = renderPlot({
dat = DATA()
if (is.null(dat)) {return()} else {
plot(dat,col=input$Color)
}
})
output$download = downloadHandler(
filename = function() {'plot.pdf'},
content = function(con) {
dat = DATA()
if (is.null(dat)) {return()} else {
pdf(con)
plot(dat,col=input$Color)
dev.off()
}
}
)
})
runApp()
runApp()
library(shiny)
shinyServer(function(input, output) {
output$action2 = renderPrint({
print(input$action1)
})
DATA = reactive({
if (is.null(input$files)) {return()} else {
if(input$action1 ==0){return()}else{
dat = read.table(input$files$datapath,header=T)
return(dat)
}
}
output$scatterPlot = renderPlot({
dat = DATA()
if (is.null(dat)) {return()} else {
plot(dat,col=input$Color)
}
})
output$download = downloadHandler(
filename = function() {'plot.pdf'},
content = function(con) {
dat = DATA()
if (is.null(dat)) {return()} else {
pdf(con)
plot(dat,col=input$Color)
dev.off()
}
}
)
})
})
runApp()
runApp()
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Ploting your data"),
sidebarPanel(
fileInput(inputId="files", label=h4("Upload your data file:"), multiple=FALSE, accept="text/plain"),
helpText("Note: you only can upload the .txt file."),
actionButton("action1", label = "Action"),
verbatimTextOutput("action2"),
radioButtons("Color", "Select the color of histogram:", choices = c("Red" = "red", "Blue" = "blue", "Green" = "green"))
),
mainPanel(
plotOutput("scatterPlot"),
downloadButton("download", label = "Download plot", class = NULL)
)
))
library(shiny)
shinyServer(function(input, output) {
output$action2 = renderPrint({
print(input$action1)
})
DATA = reactive({
if (is.null(input$files)) {return()} else {
if(input$action1 ==0){return()}else{
dat = read.table(input$files$datapath,header=T)
return(dat)
}
}
output$scatterPlot = renderPlot({
dat = DATA()
if (is.null(dat)) {return()} else {
plot(dat,col=input$Color)
}
})
output$download = downloadHandler(
filename = function() {'plot.pdf'},
content = function(con) {
dat = DATA()
if (is.null(dat)) {return()} else {
pdf(con)
plot(dat,col=input$Color)
dev.off()
}
}
)
})
})
runApp()
runApp()
library(shiny)
shinyServer(function(input, output) {
DATA = reactive({
if (is.null(input$files)) {return()} else {
if(input$action1 ==0){return()}else{
dat = read.table(input$files$datapath,header=T)
return(dat)
}
}
output$scatterPlot = renderPlot({
dat = DATA()
if (is.null(dat)) {return()} else {
plot(dat,col=input$Color)
}
})
output$download = downloadHandler(
filename = function() {'plot.pdf'},
content = function(con) {
dat = DATA()
if (is.null(dat)) {return()} else {
pdf(con)
plot(dat,col=input$Color)
dev.off()
}
}
)
})
})
runApp()
runApp()
runApp()
